// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Core.Context;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240403191343_Update-enum-to-string")]
    partial class Updateenumtostring
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AthleteCompetition", b =>
                {
                    b.Property<int>("CompetitionsID")
                        .HasColumnType("int");

                    b.Property<int>("CompetitorsID")
                        .HasColumnType("int");

                    b.HasKey("CompetitionsID", "CompetitorsID");

                    b.HasIndex("CompetitorsID");

                    b.ToTable("AthleteCompetition");
                });

            modelBuilder.Entity("backend.Core.Entities.Athlete", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SportId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SportId");

                    b.ToTable("Athletes");
                });

            modelBuilder.Entity("backend.Core.Entities.Competition", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Rang")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SportId")
                        .HasColumnType("int");

                    b.Property<int>("WinnerId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SportId");

                    b.HasIndex("WinnerId")
                        .IsUnique();

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("backend.Core.Entities.Sport", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("Sports");
                });

            modelBuilder.Entity("AthleteCompetition", b =>
                {
                    b.HasOne("backend.Core.Entities.Competition", null)
                        .WithMany()
                        .HasForeignKey("CompetitionsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Core.Entities.Athlete", null)
                        .WithMany()
                        .HasForeignKey("CompetitorsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Core.Entities.Athlete", b =>
                {
                    b.HasOne("backend.Core.Entities.Sport", "Sport")
                        .WithMany("Athletes")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("backend.Core.Entities.Competition", b =>
                {
                    b.HasOne("backend.Core.Entities.Sport", "Sport")
                        .WithMany("Competitions")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend.Core.Entities.Athlete", "Winner")
                        .WithOne()
                        .HasForeignKey("backend.Core.Entities.Competition", "WinnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Sport");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("backend.Core.Entities.Sport", b =>
                {
                    b.Navigation("Athletes");

                    b.Navigation("Competitions");
                });
#pragma warning restore 612, 618
        }
    }
}
